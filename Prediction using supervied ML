{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "91c22d1b",
   "metadata": {},
   "source": [
    "# GRIP: The Sparks Foundation\n",
    "\n",
    "## Data Science and Business Analyst intern\n",
    "\n",
    "## Author: Mridul Mittal\n",
    "\n",
    "## Task 1: Prediction using Supervised ML"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec981390",
   "metadata": {},
   "source": [
    "### In this we have to predict the percentage of an student based on the no. of study hours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8a110b0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b8b0bee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.5</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9.2</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.5</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8.3</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.7</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7.7</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5.9</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.5</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3.3</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.1</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8.9</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.9</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6.1</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.4</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2.7</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4.8</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3.8</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6.9</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.8</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Hours  Scores\n",
       "0     2.5      21\n",
       "1     5.1      47\n",
       "2     3.2      27\n",
       "3     8.5      75\n",
       "4     3.5      30\n",
       "5     1.5      20\n",
       "6     9.2      88\n",
       "7     5.5      60\n",
       "8     8.3      81\n",
       "9     2.7      25\n",
       "10    7.7      85\n",
       "11    5.9      62\n",
       "12    4.5      41\n",
       "13    3.3      42\n",
       "14    1.1      17\n",
       "15    8.9      95\n",
       "16    2.5      30\n",
       "17    1.9      24\n",
       "18    6.1      67\n",
       "19    7.4      69\n",
       "20    2.7      30\n",
       "21    4.8      54\n",
       "22    3.8      35\n",
       "23    6.9      76\n",
       "24    7.8      86"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = \"http://bit.ly/w-data\"\n",
    "df=pd.read_csv(url)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1edeb033",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel(\"study hours(hr)\")\n",
    "plt.ylabel(\"Scores(%percentage of students)\")\n",
    "plt.scatter(df.Hours,df.Scores,marker=\"+\",color=\"red\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "83ba2a82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Hours\n",
       "0     2.5\n",
       "1     5.1\n",
       "2     3.2\n",
       "3     8.5\n",
       "4     3.5\n",
       "5     1.5\n",
       "6     9.2\n",
       "7     5.5\n",
       "8     8.3\n",
       "9     2.7\n",
       "10    7.7\n",
       "11    5.9\n",
       "12    4.5\n",
       "13    3.3\n",
       "14    1.1\n",
       "15    8.9\n",
       "16    2.5\n",
       "17    1.9\n",
       "18    6.1\n",
       "19    7.4\n",
       "20    2.7\n",
       "21    4.8\n",
       "22    3.8\n",
       "23    6.9\n",
       "24    7.8"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature Variable\n",
    "X=df.drop('Scores',axis=1)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8b84173e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     21\n",
       "1     47\n",
       "2     27\n",
       "3     75\n",
       "4     30\n",
       "5     20\n",
       "6     88\n",
       "7     60\n",
       "8     81\n",
       "9     25\n",
       "10    85\n",
       "11    62\n",
       "12    41\n",
       "13    42\n",
       "14    17\n",
       "15    95\n",
       "16    30\n",
       "17    24\n",
       "18    67\n",
       "19    69\n",
       "20    30\n",
       "21    54\n",
       "22    35\n",
       "23    76\n",
       "24    86\n",
       "Name: Scores, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Target Variable\n",
    "Y=df.Scores\n",
    "Y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a315561",
   "metadata": {},
   "source": [
    "## Training and Testing Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "32c9bbfc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=30)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3af122b",
   "metadata": {},
   "source": [
    "## Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e224632f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "reg = LinearRegression()\n",
    "reg.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb472421",
   "metadata": {},
   "source": [
    "## Plotting the Regression Line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c1de999c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m=reg.coef_\n",
    "b=reg.intercept_\n",
    "line=m*X+b\n",
    "plt.scatter(X,Y,marker=\"+\",color=\"red\")\n",
    "plt.plot(X,line)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad16dc5a",
   "metadata": {},
   "source": [
    "## Predicting Percentage of Students"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ee8a9af3",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = reg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dee0c21f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([76.97173986, 27.17172289, 74.09866196, 27.17172289, 69.31019879])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9c030b6",
   "metadata": {},
   "source": [
    "## Comparing Actual Value with Predicted Value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c2c24bbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual</th>\n",
       "      <th>Predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>85</td>\n",
       "      <td>76.971740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>30</td>\n",
       "      <td>27.171723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>69</td>\n",
       "      <td>74.098662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21</td>\n",
       "      <td>27.171723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>76</td>\n",
       "      <td>69.310199</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Actual  Predicted\n",
       "10      85  76.971740\n",
       "16      30  27.171723\n",
       "19      69  74.098662\n",
       "0       21  27.171723\n",
       "23      76  69.310199"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe = pd.DataFrame({\"Actual\":Y_test,\"Predicted\":y_pred})\n",
    "dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7385d6ab",
   "metadata": {},
   "source": [
    "## Checking Accuracy of our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ce2eeacd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9452422164650991"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(X_test,Y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71261a03",
   "metadata": {},
   "source": [
    "### Hence our model is approx 94% accurate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c633d2de",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
